<h2>ComputedObservables</h2>

<p>First name: <span data-bind="text: firstName"></span></p>
<p>Last name: <span data-bind="text: lastName"></span></p>
<h2>Hello, <input data-bind="value: fullName" />!</h2>
<br />
<p>Enter bid price: <input data-bind="value: formattedPrice" /></p>
<p>Enter a numeric value: <input data-bind="value: attemptedValue" /></p>
<div data-bind="visible: !lastInputWasValid()"></div>


    <script type="text/javascript" src="knockout-2.2.0.js"></script>
    <script type="text/javascript">
        //function AppViewModel() {
        //    this.firstName = ko.observable('Bob');
        //    this.lastName = ko.observable('Smith');

        //    this.fullName = ko.computed(function () {
        //        return this.firstName() + " " + this.lastName();
        //    }, this);
        //}

        //function AppViewModel() {
        //    var self = this;

        //    self.firstName = ko.observable('Bob');
        //    self.lastName = ko.observable('Smith');
        //    self.fullName = ko.computed(function () {
        //        return self.firstName() + " " + self.lastName();
        //    });

        //    myViewModel.fullName = ko.computed(function () {
        //        return myViewModel.firstName() + " " + myViewModel.lastName();
        //    }).extend({ notify: 'always' });
        //}

        //function MyViewModel() {
        //    var self = this;
        //    self.firstName = ko.observable('Planet');
        //    self.lastName = ko.observable('Earth');

        //    self.fullName = ko.computed({
        //        read: function () {
        //            return self.firstName() + " " + this.lastName();
        //        },
        //        write: function (value) {
        //            var lastSpacePos = value.lastIndexOf(" ");
        //            if (lastSpacePos > 0) { // Ignore values with no space character
        //                self.firstName(value.substring(0, lastSpacePos)); // Update "firstName"
        //                self.lastName(value.substring(lastSpacePos + 1)); // Update "lastName"
        //            }
        //        },
        //        owner: self
        //    });
        //}

        //function MyViewModel() {
        //    var self = this;
        //    self.price = ko.observable(25.99);

        //    self.formattedPrice = ko.computed({
        //        read: function () {
        //            return '$' + self.price().toFixed(2);
        //        },
        //        write: function (value) {
        //            // Strip out unwanted characters, parse as float, then write the raw data back to the underlying "price" observable
        //            value = parseFloat(value.replace(/[^\.\d]/g, ""));
        //            self.price(isNaN(value) ? 0 : value); // Write to underlying storage
        //        },
        //        owner: self
        //    });
        //}

        ////ko.applyBindings(new MyViewModel());

        //ko.applyBindings(new MyViewModel());

        //function MyViewModel() {
        //    var self = this;
        //    self.acceptedNumericValue = ko.observable(123);
        //    self.lastInputWasValid = ko.observable(true);

        //    self.attemptedValue = ko.computed({
        //        read: self.acceptedNumericValue,
        //        write: function (value) {
        //            if (isNaN(value)) {
        //                self.lastInputWasValid(false);
        //            }
        //            else {
        //                self.lastInputWasValid(true);
        //                self.acceptedNumericValue(value); // Write to underlying storage
        //            }
        //        },
        //        owner: self
        //    });
        //}

        // ko.applyBindings(new MyViewModel());

        ko.computed(function () {
            var params = {
                page: this.pageIndex(),
                selected: this.selectedItem.peek()
            };
            $.getJSON('/Some/Json/Service', params, this.currentPageData);
        }, this);

        for (var prop in myObject) {
            if (myObject.hasOwnProperty(prop) && !ko.isComputed(myObject[prop])) {
                result[prop] = myObject[prop];
            }
        }

    </script>
